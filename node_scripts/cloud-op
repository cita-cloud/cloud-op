#! /bin/bash

source ./env.sh

# utils
get_pods_count() {
    running=$(kubectl get pods -l app.kubernetes.io/chain-node=$STS_NAME --no-headers -n$NAME_SPACE 2>/dev/null | wc -l)
    if [ "$running" -eq 0 ]; then
        echo "no pod running, exit" >&2
        exit
    fi
    echo $running
}

wait_pod_stop() {
    stop_pod=$1
    while true; do
        if kubectl get pod $stop_pod -n$NAME_SPACE >/dev/null 2>&1; then
            echo "waiting $stop_pod stop..."
            sleep 5
        else
            echo "$stop_pod stopped"
            break
        fi
    done
}

subcommand=$1
export ARGS=" $*"

case $subcommand in
backup)
    backup() {
        # check backup env
        if [ -z "$NAME_SPACE" ]; then
            echo "env NAME_SPACE not set" >&2
            exit 1
        fi
        if [ -z "$DOCKER_REGISTRY" ]; then
            echo "env DOCKER_REGISTRY not set" >&2
            exit 1
        fi
        if [ -z "$DOCKER_REPO" ]; then
            echo "env DOCKER_REPO not set" >&2
            exit 1
        fi
        if [ -z "$SHARE_SC" ]; then
            echo "env SHARE_SC not set" >&2
            exit 1
        fi
        if [ -z "$STS_NAME" ]; then
            echo "env STS_NAME not set" >&2
            exit 1
        fi

        # stop last pod
        running=$(get_pods_count)
        echo "$STS_NAME: $running pod(s) is running"
        stop_scale=$((running - 1))
        backup_node=$STS_NAME-$stop_scale
        export BACKUP_NODE=$backup_node
        kubectl scale sts $STS_NAME --replicas=$stop_scale -n$NAME_SPACE >/dev/null
        wait_pod_stop $backup_node

        # update yamls
        python ./yamls/backup/update_backup_yamls.py
        echo "yamls updated"

        # backup
        kubectl apply -f ./yamls/backup/backup_pvc.yaml -n$NAME_SPACE >/dev/null
        kubectl apply -f ./yamls/backup/backup_job.yaml -n$NAME_SPACE >/dev/null
        echo "waitting $backup_node backup..."
        kubectl wait --for=condition=complete --timeout=-1s job/backup-job -n $NAME_SPACE
        kubectl scale sts $STS_NAME --replicas=$running -n$NAME_SPACE >/dev/null

        # delete
        kubectl delete job backup-job -n$NAME_SPACE >/dev/null
    }
    backup
    ;;
recover)
    recover() {
        # check recover env
        if [ -z "$NAME_SPACE" ]; then
            echo "env NAME_SPACE not set" >&2
            exit 1
        fi
        if [ -z "$SHARE_SC" ]; then
            echo "env SHARE_SC not set" >&2
            exit 1
        fi
        if [ -z "$STS_NAME" ]; then
            echo "env STS_NAME not set" >&2
            exit 1
        fi

        running=$(get_pods_count)
        echo "$STS_NAME: $running pod(s) is running"

        # parse recover args
        case $3 in
            new)
            ;;
            *)
            ..
        esac
        
    }
    recover
    ;;
rollback)
    rollback() {
        # check rollback env
        if [ -z "$NAME_SPACE" ]; then
            echo "MY_VAR 是空的"
        else
            echo "MY_VAR 不为空"
        fi
    }
    rollback
    ;;
*)
    echo "subcommand: backup, recover, rollback"
    ;;
esac
